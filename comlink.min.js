const uid=Math.floor(Math.random()*Number.MAX_SAFE_INTEGER);let pingPongMessageCounter=0;function postMessageOnEndpoint(a,b,c){return a instanceof Window?a.postMessage(b,'*',c):a.postMessage(b,c)}function pingPongMessage(a,b,c){const d=`${uid}-${pingPongMessageCounter++}`;return new Promise((e)=>{a.addEventListener('message',function b(c){c.data.id!==d||(a.removeEventListener('message',b),e(c))}),b=Object.assign({},b,{id:d}),postMessageOnEndpoint(a,b,c)})}function asyncIteratorSupport(){return'asyncIterator'in Symbol}function batchingProxy(a){let b=[];return new Proxy(function(){},{construct(c,d){const e=a('CONSTRUCT',b,d);return b=[],e},apply(c,d,e){if('bind'===b[b.length-1]){const c=b.slice();return b=[],(...b)=>a('APPLY',c.slice(0,-1),b)}const f=a('APPLY',b,e);return b=[],f},get(c,d,e){if('then'===d&&0===b.length)return{then:()=>e};if(asyncIteratorSupport()&&d===Symbol.asyncIterator)return()=>e;if('then'===d){const c=a('GET',b);return b=[],Promise.resolve(c).then.bind(c)}return b.push(d),e}})}const TRANSFERABLE_TYPES=[ArrayBuffer,MessagePort];function isTransferable(a){return TRANSFERABLE_TYPES.some((b)=>a instanceof b)}function*iterateAllProperties(a){if(!a)return;if('string'==typeof a)return;yield a;let b=Object.values(a);Array.isArray(a)&&(b=a);for(const c of b)yield*iterateAllProperties(c)}function transferableProperties(a){return Array.from(iterateAllProperties(a)).filter((a)=>isTransferable(a))}export function proxy(a){return a instanceof MessagePort&&a.start(),batchingProxy(async(b,c,d)=>{const e=await pingPongMessage(a,{type:b,callPath:c,argumentsList:d},transferableProperties(d)),f=e.data;return'PROXY'===f.type?proxy(f.endpoint):f.obj})}const transferProxySymbol=Symbol('transferProxy');export function transferProxy(a){return a[transferProxySymbol]=!0,a}function isTransferProxy(a){return a&&a[transferProxySymbol]}function makeInvocationResult(a){if(isTransferProxy(a)){const{port1:b,port2:c}=new MessageChannel;return expose(a,b),{type:'PROXY',endpoint:c}}return{type:'OBJECT',obj:a}}export function expose(a,b){b instanceof MessagePort&&b.start(),b.addEventListener('message',async function(c){const d=c.data;switch(d.type){case'GET':case'APPLY':{let c=await d.callPath.reduce((a,b)=>a[b],a);if('APPLY'===d.type){d.callPath.pop();const b=await d.callPath.reduce((a,b)=>a[b],a),e='AsyncGeneratorFunction'===c.constructor.name;c=await c.apply(b,d.argumentsList),e&&(c=transferProxy(c))}const e=makeInvocationResult(c);e.id=d.id,postMessageOnEndpoint(b,e,transferableProperties(c));break}case'CONSTRUCT':{const c=d.callPath.reduce((a,b)=>a[b],a),e=new c(...(d.argumentsList||[])),{port1:f,port2:g}=new MessageChannel;expose(e,f),postMessageOnEndpoint(b,{id:d.id,type:'PROXY',endpoint:g},[g]);break}}})}
