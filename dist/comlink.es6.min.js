export const Comlink=function(){function a(b){return d(b),l(async(c,d,e)=>{const f=await j(b,{type:c,callPath:d,argumentsList:e},o(e)),g=f.data;return'PROXY'===g.type?a(g.endpoint):g.obj})}function b(a){return a[u]=!0,a}function c(a,f){d(f),e(f,async function(d){if(!d.data.id)return;const e=d.data;let g=await e.callPath.reduce((a,b)=>a[b],a);switch(e.type){case'APPLY':{e.callPath.pop();const c=await e.callPath.reduce((a,b)=>a[b],a),d='AsyncGeneratorFunction'===g.constructor.name;g=await g.apply(c,e.argumentsList),d&&(g=b(g))}case'GET':{const a=q(g);return a.id=e.id,i(f,a,o(g))}case'CONSTRUCT':{const a=new g(...(e.argumentsList||[])),{port1:b,port2:d}=new MessageChannel;return c(a,b),i(f,{id:e.id,type:'PROXY',endpoint:d},[d])}}})}function d(a){g(a)&&a.start()}function e(a,b){a.addEventListener('message',b)}function f(a,b){a.removeEventListener('message',b)}function g(a){return'MessagePort'===a.constructor.name}function h(a){return'Window'===a.constructor.name}function i(a,b,c){return h(a)?a.postMessage(b,'*',c):a.postMessage(b,c)}function j(a,b,c){const d=`${r}-${s++}`;return new Promise((g)=>{e(a,function b(c){c.data.id!==d||(f(a,b),g(c))}),b=Object.assign({},b,{id:d}),i(a,b,c)})}function k(){return'asyncIterator'in Symbol}function l(a){let b=[];return new Proxy(function(){},{construct(c,d){const e=a('CONSTRUCT',b,d);return b=[],e},apply(c,d,e){if('bind'===b[b.length-1]){const c=b.slice();return b=[],(...b)=>a('APPLY',c.slice(0,-1),b)}const f=a('APPLY',b,e);return b=[],f},get(c,d,e){if('then'===d&&0===b.length)return{then:()=>e};if(k()&&d===Symbol.asyncIterator)return()=>e;if('then'===d){const c=a('GET',b);return b=[],Promise.resolve(c).then.bind(c)}return b.push(d),e}})}function m(a){return t.some((b)=>a instanceof b)}function*n(a){if(!a)return;if('string'==typeof a)return;yield a;let b=Object.values(a);Array.isArray(a)&&(b=a);for(const c of b)yield*n(c)}function o(a){const b=[];for(const c of n(a))m(c)&&b.push(c);return b}function p(a){return a&&a[u]}function q(a){if(p(a)){const{port1:b,port2:d}=new MessageChannel;return c(a,b),{type:'PROXY',endpoint:d}}return{type:'OBJECT',obj:a}}const r=Math.floor(Math.random()*Number.MAX_SAFE_INTEGER);let s=0;const t=[ArrayBuffer,MessagePort],u=Symbol('transferProxy');return{proxy:a,transferProxy:b,expose:c}}();
